#! /bin/bash

#General Directory Declarations
START_DIR=$PWD
MY_PATH="${START_DIR}/rpi-setup-tool"
INSTALL_DIR=/etc/rpi-setup-tool
BAK_DIR="${INSTALL_DIR}/backup"
TEMP_DIR=/tmp/downloads
SCRIPTS_DIR=/usr/bin
NAS_DIR=/mnt/ImageStorage
CONFIG=/boot/config.txt
CONFIG_BAK="${BAK_DIR}/config_rpisetup.bak"
FSTAB=/etc/fstab
FSTAB_BAK="${BAK_DIR}/fstab_rpisetup.bak"
CRON_BAK="${BAK_DIR}/crontab.bak"
SMB=/etc/samba/smb.conf
SMB_BAK="${BAK_DIR}/smb.bak"
NTP=/etc/systemd/timesyncd.conf


#Package Filename Declarations
KALIVNC_FILENAME=rpi-kalivnc-autoinstaller
EEPROM_FILENAME=rpi-eeprom-autoinstaller
UCLCD_FILENAME=uctronics-lcd-autoinstaller
ISPBUSTER_FILENAME=isp-buster-autoinstaller
NETDRIVE_FILENAME=netdrive-connector
PISHRINK_FILENAME_LONG=pishrink.sh
PISHRINK_FILENAME_SHORT=pishrink

#WGET URL Declarations
WGET_KALIVNC="https://raw.githubusercontent.com/xXNightstalkerXx/rpi-kalivnc-installer/master/${KALIVNC_FILENAME}"
WGET_EEPROM="https://raw.githubusercontent.com/xXNightstalkerXx/rpi-eeprom-flasher/master/${EEPROM_FILENAME}"
WGET_UCLCD="https://raw.githubusercontent.com/xXNightstalkerXx/uctronics-lcd-installer/master/${UCLCD_FILENAME}"
WGET_ISPBUSTER="https://raw.githubusercontent.com/xXNightstalkerXx/isp-buster/master/${ISPBUSTER_FILENAME}"
WGET_NETDRIVE="https://raw.githubusercontent.com/xXNightstalkerXx/netdrive-connector/master/${NETDRIVE_FILENAME}"
WGET_PISHRINK="https://raw.githubusercontent.com/Drewsif/PiShrink/master/${PISHRINK_FILENAME_LONG}"

#Color Declarations
std=$(tput setaf 15)
red=$(tput setaf 9 bold)
green=$(tput setaf 10 bold)
yellow=$(tput setaf 11 bold)
#pink=$(tput setaf 57)
blue=$(tput setaf 27 bold)

#Declare Arrays
USED_PACKAGE_ARRAY=()
UNUSED_PACKAGE_ARRAY=()

#Function Decalarations
clear_arrays () {
	USED_PACKAGE_ARRAY=()
	UNUSED_PACKAGE_ARRAY=()
}

set_possible_packages () {
	if [[ $INSTALL_OPTIONS -eq 1 ]]
	then
		#Possible Packages to install for Kali
		EEPROM_UPDATE=false
		RASPI_CONFIG=true
		KALIVNC=true
		UCLCD=true
		NETDRIVE=true
		EEPROM_FLASHER=true
		PISHRINK=true
		SAMBA=true
		GPARTED=true
		RPIIMAGER=false
		NO_WIFI=false
		MNT_NAS=true
		ISPBUSTER=false
		SET_LOCALNTP=true


	elif [[ $INSTALL_OPTIONS -eq 2 ]]
	then
		#Possible Packages to install for Raspbian Lite
		EEPROM_UPDATE=true
		RASPI_CONFIG=false
		KALIVNC=false
		UCLCD=true
		NETDRIVE=true
		EEPROM_FLASHER=false
		PISHRINK=true
		SAMBA=true
		GPARTED=false
		RPIIMAGER=false
		NO_WIFI=true
		MNT_NAS=true
		ISPBUSTER=true
		SET_LOCALNTP=true

	elif [[ $INSTALL_OPTIONS -eq 3 ]]
	then
		#Possible Packages to install for Raspbian GUI
		EEPROM_UPDATE=true
		RASPI_CONFIG=false
		KALIVNC=false
		UCLCD=true
		NETDRIVE=true
		EEPROM_FLASHER=false
		PISHRINK=true
		SAMBA=true
		GPARTED=true
		RPIIMAGER=true
		NO_WIFI=true
		MNT_NAS=true
		ISPBUSTER=true
		SET_LOCALNTP=true
	fi
}

set_standard_packages () {
	if [[ $INSTALL_OPTIONS -eq 1 ]]
	then
		#Standard Packages to install for Kali
		RASPI_CONFIG=true
		KALIVNC=true
		UCLCD=true
		NETDRIVE=true
		EEPROM_FLASHER=true
		PISHRINK=true
		SAMBA=true
		GPARTED=true
		MNT_NAS=true
		ISPBUSTER=false
		SET_LOCALNTP=true
		USED_PACKAGE_ARRAY=("RPI Config" "Kali VNC" "UCTronics LCD" "Netdrive Connector" "EEPROM Flasher" "Pishrink" "Samba" "GParted" "Mount NAS" "Local NTP")

		#Packages that can't be installed
		#EEPROM_UPDATE=false
		#NO_WIFI=false
		#RPIIMAGER=false
		#ISPBUSTER=false

	elif [[ $INSTALL_OPTIONS -eq 2 ]]
	then
		#Standard Packages to install for Raspbian Lite
		EEPROM_UPDATE=true
		UCLCD=true
		NETDRIVE=true
		PISHRINK=true
		SAMBA=true
		NO_WIFI=true
		MNT_NAS=false
		ISPBUSTER=false
		SET_LOCALNTP=true
		USED_PACKAGE_ARRAY=("Update EEPROM" "UCTronics LCD" "Netdrive Connector" "Pishrink" "Samba" "Disable WIFI" "Local NTP")
		UNUSED_PACKAGE_ARRAY=("Mount NAS" "ISP Buster")

		#Packages that can't be installed
		#RASPI_CONFIG=false
		#KALIVNC=false
		#EEPROM_FLASHER=false
		#GPARTED=false
		#RPIIMAGER=false

	elif [[ $INSTALL_OPTIONS -eq 3 ]]
	then
		#Standard Packages to install for Raspbian GUI
		EEPROM_UPDATE=true
		UCLCD=true
		NETDRIVE=true
		PISHRINK=true
		SAMBA=true
		GPARTED=true
		RPIIMAGER=true
		NO_WIFI=true
		MNT_NAS=true
		ISPBUSTER=false
		SET_LOCALNTP=true
		USED_PACKAGE_ARRAY=("Update EEPROM" "UCTronics LCD" "Netdrive Connector" "Pishrink" "Samba" "GParted" "RPI Imager" "Disable WIFI" "Mount NAS" "Local NTP")
		UNUSED_PACKAGE_ARRAY=("ISP Buster")

		#Packages that can't be installed
		#RASPI_CONFIG=false
		#KALIVNC=false
		#EEPROM_FLASHER=false
	fi
}

select_custom_packages () {
	echo ""
	echo ""
	echo "${blue}Please select the packages you want to install!${std}"

	if $EEPROM_UPDATE
	then
		echo ""
		echo "${green}Update EEPROM?${std}"
		read -r -p "Yes (y)/ No (n): " n;

		while ! [[ "$n" =~ ^(y|n)$ ]];
		do
			echo ""
			echo "${red}Wrong Input! Please type 'y' for 'YES' or 'n' for 'NO'!${std}"
			read -r -p "Yes (y)/ No (n): " n;
		done

		if [[ "$n" =~ ^(y)$ ]];
		then
			EEPROM_UPDATE=true
			USED_PACKAGE_ARRAY+=("Update EEPROM")
		else
			EEPROM_UPDATE=false
			UNUSED_PACKAGE_ARRAY+=("Update EEPROM")
		fi
	fi

	if $RASPI_CONFIG
	then
		echo ""
		echo "${green}Install RPI Config?${std}"
		read -r -p "Yes (y)/ No (n): " n;

		while ! [[ "$n" =~ ^(y|n)$ ]];
		do
			echo ""
			echo "${red}Wrong Input! Please type 'y' for 'YES' or 'n' for 'NO'!${std}"
			read -r -p "Yes (y)/ No (n): " n;
		done

		if [[ "$n" =~ ^(y)$ ]];
		then
			RASPI_CONFIG=true
			USED_PACKAGE_ARRAY+=("RPI Config")
		else
			RASPI_CONFIG=false
			UNUSED_PACKAGE_ARRAY+=("RPI Config")
		fi
	fi

	if $KALIVNC
	then
		echo ""
		echo "${green}Install Kali VNC?${std}"
		read -r -p "Yes (y)/ No (n): " n;

		while ! [[ "$n" =~ ^(y|n)$ ]];
		do
			echo ""
			echo "${red}Wrong Input! Please type 'y' for 'YES' or 'n' for 'NO'!${std}"
			read -r -p "Yes (y)/ No (n): " n;
		done

		if [[ "$n" =~ ^(y)$ ]];
		then
			KALIVNC=true
			USED_PACKAGE_ARRAY+=("Kali VNC")
		else
			KALIVNC=false
			UNUSED_PACKAGE_ARRAY+=("Kali VNC")
		fi
	fi

	if $UCLCD
	then
		echo ""
		echo "${green}Install UCTronics LCD?${std}"
		read -r -p "Yes (y)/ No (n): " n;

		while ! [[ "$n" =~ ^(y|n)$ ]];
		do
			echo ""
			echo "${red}Wrong Input! Please type 'y' for 'YES' or 'n' for 'NO'!${std}"
			read -r -p "Yes (y)/ No (n): " n;
		done

		if [[ "$n" =~ ^(y)$ ]];
		then
			UCLCD=true
			USED_PACKAGE_ARRAY+=("UCTronics LCD")
		else
			UCLCD=false
			UNUSED_PACKAGE_ARRAY+=("UCTronics LCD")
		fi
	fi

	if $NETDRIVE
	then
		echo ""
		echo "${green}Install Netdrive Connector?${std}"
		read -r -p "Yes (y)/ No (n): " n;

		while ! [[ "$n" =~ ^(y|n)$ ]];
		do
			echo ""
			echo "${red}Wrong Input! Please type 'y' for 'YES' or 'n' for 'NO'!${std}"
			read -r -p "Yes (y)/ No (n): " n;
		done

		if [[ "$n" =~ ^(y)$ ]];
		then
			NETDRIVE=true
			USED_PACKAGE_ARRAY+=("Netdrive Connector")
		else
			NETDRIVE=false
			UNUSED_PACKAGE_ARRAY+=("Netdrive Connector")
		fi
	fi

	if $EEPROM_FLASHER
	then
		echo ""
		echo "${green}Install EEPROM Flasher?${std}"
		read -r -p "Yes (y)/ No (n): " n;

		while ! [[ "$n" =~ ^(y|n)$ ]];
		do
			echo ""
			echo "${red}Wrong Input! Please type 'y' for 'YES' or 'n' for 'NO'!${std}"
			read -r -p "Yes (y)/ No (n): " n;
		done

		if [[ "$n" =~ ^(y)$ ]];
		then
			EEPROM_FLASHER=true
			USED_PACKAGE_ARRAY+=("EEPROM Flasher")
		else
			EEPROM_FLASHER=false
			UNUSED_PACKAGE_ARRAY+=("EEPROM Flasher")
		fi
	fi

	if $ISPBUSTER
	then
		echo ""
		echo "${green}Install ISP Buster?${std}"
		read -r -p "Yes (y)/ No (n): " n;

		while ! [[ "$n" =~ ^(y|n)$ ]];
		do
			echo ""
			echo "${red}Wrong Input! Please type 'y' for 'YES' or 'n' for 'NO'!${std}"
			read -r -p "Yes (y)/ No (n): " n;
		done

		if [[ "$n" =~ ^(y)$ ]];
		then
			ISPBUSTER=true
			USED_PACKAGE_ARRAY+=("ISP Buster")
		else
			ISPBUSTER=false
			UNUSED_PACKAGE_ARRAY+=("ISP Buster")
		fi
	fi

	if $PISHRINK
	then
		echo ""
		echo "${green}Install Pishrink?${std}"
		read -r -p "Yes (y)/ No (n): " n;

		while ! [[ "$n" =~ ^(y|n)$ ]];
		do
			echo ""
			echo "${red}Wrong Input! Please type 'y' for 'YES' or 'n' for 'NO'!${std}"
			read -r -p "Yes (y)/ No (n): " n;
		done

		if [[ "$n" =~ ^(y)$ ]];
		then
			PISHRINK=true
			USED_PACKAGE_ARRAY+=("Pishrink")
		else
			PISHRINK=false
			UNUSED_PACKAGE_ARRAY+=("Pishrink")
		fi
	fi

	if $SAMBA
	then
		echo ""
		echo "${green}Install Samba?${std}"
		read -r -p "Yes (y)/ No (n): " n;

		while ! [[ "$n" =~ ^(y|n)$ ]];
		do
			echo ""
			echo "${red}Wrong Input! Please type 'y' for 'YES' or 'n' for 'NO'!${std}"
			read -r -p "Yes (y)/ No (n): " n;
		done

		if [[ "$n" =~ ^(y)$ ]];
		then
			SAMBA=true
			USED_PACKAGE_ARRAY+=("Samba")
		else
			SAMBA=false
			UNUSED_PACKAGE_ARRAY+=("Samba")
		fi
	fi

	if $GPARTED
	then
		echo ""
		echo "${green}Install GParted?${std}"
		read -r -p "Yes (y)/ No (n): " n;

		while ! [[ "$n" =~ ^(y|n)$ ]];
		do
			echo ""
			echo "${red}Wrong Input! Please type 'y' for 'YES' or 'n' for 'NO'!${std}"
			read -r -p "Yes (y)/ No (n): " n;
		done

		if [[ "$n" =~ ^(y)$ ]];
		then
			GPARTED=true
			USED_PACKAGE_ARRAY+=("GParted")
		else
			GPARTED=false
			UNUSED_PACKAGE_ARRAY+=("GParted")
		fi
	fi

	if $RPIIMAGER
	then
		echo ""
		echo "${green}Install RPI Imager?${std}"
		read -r -p "Yes (y)/ No (n): " n;

		while ! [[ "$n" =~ ^(y|n)$ ]];
		do
			echo ""
			echo "${red}Wrong Input! Please type 'y' for 'YES' or 'n' for 'NO'!${std}"
			read -r -p "Yes (y)/ No (n): " n;
		done

		if [[ "$n" =~ ^(y)$ ]];
		then
			RPIIMAGER=true
			USED_PACKAGE_ARRAY+=("RPI Imager")
		else
			RPIIMAGER=false
			UNUSED_PACKAGE_ARRAY+=("RPI Imager")
		fi
	fi

	if $NO_WIFI
	then
		echo ""
		echo "${green}Disable Bluetooth and WIFI?${std}"
		read -r -p "Yes (y)/ No (n): " n;

		while ! [[ "$n" =~ ^(y|n)$ ]];
		do
			echo ""
			echo "${red}Wrong Input! Please type 'y' for 'YES' or 'n' for 'NO'!${std}"
			read -r -p "Yes (y)/ No (n): " n;
		done

		if [[ "$n" =~ ^(y)$ ]];
		then
			NO_WIFI=true
			USED_PACKAGE_ARRAY+=("Disable WIFI")
		else
			NO_WIFI=false
			UNUSED_PACKAGE_ARRAY+=("Disable WIFI")
		fi
	fi

	if $MNT_NAS
	then
		echo ""
		echo "${green}Mount a NAS?${std}"
		read -r -p "Yes (y)/ No (n): " n;

		while ! [[ "$n" =~ ^(y|n)$ ]];
		do
			echo ""
			echo "${red}Wrong Input! Please type 'y' for 'YES' or 'n' for 'NO'!${std}"
			read -r -p "Yes (y)/ No (n): " n;
		done

		if [[ "$n" =~ ^(y)$ ]];
		then
			MNT_NAS=true
			USED_PACKAGE_ARRAY+=("Mount NAS")
		else
			MNT_NAS=false
			UNUSED_PACKAGE_ARRAY+=("Mount NAS")
		fi
	fi

	if $SET_LOCALNTP
	then
		echo ""
		echo "${green}Fetch systemtime from a Local NTP Server?${std}"
		echo ""
		echo "${green}If your Firewall blocks vulnerable NTP Packets to the Internet${std}"
		echo "${green}this machine won't be able to get the correct systemtime!${std}"
		read -r -p "Yes (y)/ No (n): " n;

		while ! [[ "$n" =~ ^(y|n)$ ]];
		do
			echo ""
			echo "${red}Wrong Input! Please type 'y' for 'YES' or 'n' for 'NO'!${std}"
			read -r -p "Yes (y)/ No (n): " n;
		done

		if [[ "$n" =~ ^(y)$ ]];
		then
			SET_LOCALNTP=true
			USED_PACKAGE_ARRAY+=("Local NTP")
		else
			SET_LOCALNTP=false
			UNUSED_PACKAGE_ARRAY+=("Local NTP")
		fi
	fi
}

show_packages_to_install () {
	echo ""
	echo ""
	echo "${blue}The following Packages are selected for Installation:${std}"
	echo ""

	for i in "${USED_PACKAGE_ARRAY[@]}"
	do
		printf "%s\n" "${i}"
	done

	if ! [[ ${#UNUSED_PACKAGE_ARRAY[@]} -eq 0 ]]
	then
		echo ""
		echo "${blue}The following Packages are available for Installation but are NOT selected:${std}"
		echo ""

		for i in "${UNUSED_PACKAGE_ARRAY[@]}"
		do
			printf "%s\n" "${i}"
		done
	else
		echo ""
		echo "${blue}There are no other Packages available to install!${std}"
	fi
}

install_eeprom_update () {
	echo ""
	echo ""
	echo "${blue}Updating the EEPROM...${std}"
	echo ""
	sudo rpi-eeprom-update -d -a
	echo ""
	echo "${blue}EEPROM updated! Continuing Installation!${std}"
	sleep 1
}

install_raspi_config () {
	echo ""
	echo ""
	echo "${blue}Installing RPI Config...${std}"
	echo ""
	sudo apt-get install kalipi-config -y
	echo ""
	echo "${blue}RPI Config Installed! Continuing Installation!${std}"
	sleep 1
}

install_kalivnc () {
	echo ""
	echo ""
	echo "${blue}Installing Kali VNC...${std}"
	echo ""
	echo "${blue}Switching to ${TEMP_DIR} ...${std}"
	cd $TEMP_DIR
	echo "${blue}Downloading Kali VNC Installer...${std}"
	sudo wget $WGET_KALIVNC
	echo "${blue}Making the Installer executable...${std}"
	sudo chmod 0755 $KALIVNC_FILENAME
	echo "${blue}Executing the Kali VNC Installer...${std}"
	echo ""
	./"${KALIVNC_FILENAME}"
	echo ""
	echo "${blue}Kali VNC installed! Continuing Installation!${std}"
	sleep 1
}

install_uclcd () {
	echo ""
	echo ""
	echo "${blue}Installing UCTronics LCD...${std}"
	echo ""
	echo "${blue}Switching to ${TEMP_DIR} ...${std}"
	cd $TEMP_DIR
	echo "${blue}Downloading UCTronics LCD Installer...${std}"
	sudo wget $WGET_UCLCD
	echo "${blue}Making the Installer executable...${std}"
	sudo chmod 0755 $UCLCD_FILENAME
	echo "${blue}Executing the UCTronics LCD Installer...${std}"
	echo ""
	./"${UCLCD_FILENAME}"
	echo ""
	echo "${blue}UCTronics LCD installed! Continuing Installation!${std}"
	sleep 1
}

install_netdrive () {
	echo ""
	echo ""
	echo "${blue}Installing Netdrive Connector...${std}"
	echo ""
	echo "${blue}Switching to ${TEMP_DIR} ...${std}"
	cd $TEMP_DIR
	echo "${blue}Downloading Netdrive Connector...${std}"
	sudo wget $WGET_NETDRIVE
	echo "${blue}Making the Script executable...${std}"
	sudo chmod 0755 $NETDRIVE_FILENAME
	echo "${blue}Moving the Script to ${SCRIPTS_DIR} ...${std}"
	sudo mv $NETDRIVE_FILENAME "${SCRIPTS_DIR}/${NETDRIVE_FILENAME}"
	echo ""
	echo "${blue}Netdrive Connector installed! Continuing Installation!${std}"
	sleep 1
}

install_eeprom_flasher () {
	echo ""
	echo ""
	echo "${blue}Installing EEPROM Flasher...${std}"
	echo ""
	echo "${blue}Switching to ${TEMP_DIR} ...${std}"
	cd $TEMP_DIR
	echo "${blue}Downloading EEPROM Flasher Installer...${std}"
	sudo wget $WGET_EEPROM
	echo "${blue}Making the Installer executable...${std}"
	sudo chmod 0755 $EEPROM_FILENAME
	echo "${blue}Executing the EEPROM Flasher Installer...${std}"
	echo ""
	./"${EEPROM_FILENAME}"
	echo ""
	echo "${blue}EEPROM Flasher installed! Continuing Installation!${std}"
	sleep 1
}

install_ispbuster () {
	echo ""
	echo ""
	echo "${blue}Installing ISP Buster...${std}"
	echo ""
	echo "${blue}Switching to ${TEMP_DIR} ...${std}"
	cd $TEMP_DIR
	echo "${blue}Downloading ISP Buster Installer...${std}"
	sudo wget $WGET_ISPBUSTER
	echo "${blue}Making the Installer executable...${std}"
	sudo chmod 0755 $ISPBUSTER_FILENAME
	echo "${blue}Executing the ISP Buster Installer...${std}"
	echo ""
	./"${ISPBUSTER_FILENAME}"
	echo ""
	echo "${blue}ISP Buster installed! Continuing Installation!${std}"
	sleep 1
}

install_pishrink () {
	echo ""
	echo ""
	echo "${blue}Installing Pishrink...${std}"
	echo ""
	echo "${blue}Switching to ${TEMP_DIR} ...${std}"
	cd $TEMP_DIR
	echo "${blue}Downloading Pishrink...${std}"
	sudo wget $WGET_PISHRINK
	echo "${blue}Changing the name of the Script...${std}"
	sudo mv $PISHRINK_FILENAME_LONG $PISHRINK_FILENAME_SHORT
	echo "${blue}Making the Script executable...${std}"
	sudo chmod 0755 $PISHRINK_FILENAME_SHORT
	echo "${blue}Moving the Script to ${SCRIPTS_DIR} ...${std}"
	sudo mv $PISHRINK_FILENAME_SHORT "${SCRIPTS_DIR}/${PISHRINK_FILENAME_SHORT}"
	echo ""
	echo "${blue}Pishrink installed! Continuing Installation!${std}"
	sleep 1
}

install_samba () {
	echo ""
	echo ""
	echo "${blue}Installing Samba...${std}"
	echo ""
	echo "${blue}Checking if Samba is already installed...${std}"

	if hash smbd 2>/dev/null
	then
		echo "${blue}Samba is already installed!${std}"
	else
		echo "${blue}Samba is not installed. Installing Samba now!${std}"
		echo ""
		sudo apt-get install samba samba-common -y
		sleep 1
	fi

	echo ""
	echo "${green}Please input a new Samba Password!${std}"
	sudo smbpasswd -a "${USER}"
	echo "${blue}Creating a Backup of ${SMB} ...${std}"
	echo "${blue}Copying ${SMB} to ${SMB_BAK} ...${std}"
	sudo cp $SMB $SMB_BAK
	echo "${blue}Disabling NetBIOS Broadcasting on Ports 137-138 ...${std}"
	l=$(grep -in "bind interfaces only" ${SMB} | awk -F: '{print $1}')
	l=$((l+1))
	sudo sed -i "${l}i disable netbios = yes" /etc/samba/smb.conf
	sudo update-rc.d nmbd disable
	echo ""
	echo "${blue}Samba is installed and okay! Continuing Installation!${std}"
	sleep 1
}

install_gparted () {
	echo ""
	echo ""
	echo "${blue}Installing GParted...${std}"
	echo ""
	echo "${blue}Checking if GParted is already installed...${std}"

	if hash gparted 2>/dev/null
	then
		echo "${blue}GParted is already installed!${std}"
	else
		echo "${blue}GParted is not installed. Installing GParted now!${std}"
		echo ""
		sudo apt-get install gparted -y
		sleep 1
	fi

	echo ""
	echo "${blue}GParted is installed and okay! Continuing Installation!${std}"
	sleep 1
}

install_rpi_imager () {
	echo ""
	echo ""
	echo "${blue}Installing RPI Imager...${std}"
	echo ""
	echo "${blue}Checking if RPI Imager is already installed...${std}"

	if hash rpi-imager 2>/dev/null
	then
		echo "${blue}RPI Imager is already installed!${std}"
	else
		echo "${blue}RPI Imager is not installed. Installing RPI Imager now!${std}"
		echo ""
		sudo apt-get install rpi-imager -y
		sleep 1
	fi

	echo ""
	echo "${blue}RPI Imager is installed and okay! Continuing Installation!${std}"
	sleep 1
}

install_no_wifi () {
	echo ""
	echo ""
	echo "${blue}Disabling Bluetooth and WIFI...${std}"
	echo ""
	echo "${blue}Adding necessary lines at ${CONFIG} ...${std}"
	echo "dtoverlay=disable-bt" | sudo tee -a $CONFIG > /dev/null
	echo "dtoverlay=disable-wifi" | sudo tee -a $CONFIG > /dev/null
	echo "${blue}Disabling Bluetooth UART...${std}"
	sudo systemctl disable hciuart
	echo ""
	echo "${blue}Successfully disabled Bluetooth and WIFI! Continuing the Installation!${std}"
	sleep 1
}

install_local_ntp () {
	echo ""
	echo ""
	echo "${green}Do you want to set the NTP Server IP manually or setup the Default Gateway?${std}"
	echo ""
	echo "1. Set IP to NTP Server manually"
	echo "2. Fetch IP of the default Gateway"
	echo ""
	read -r -p "${green}Enter a Number for an Option: ${std}" n

	while [[ $n -lt 1 || $n -gt 2 ]]
	do
		echo ""
		echo "${red}Wrong Input! Please Select a Number for an Option!${std}"
		read -r -p "Enter a Number for an Option: " n;
	done

	if [[ $n -eq 1 ]]
	then
		echo ""
		read -r -p "${green}Enter the IP of the NTP Server: ${std}" ip_adress;
		echo "${blue}Checking if the Host is reachable...${std}"

		if ping -c 1 "$ip_adress" &> /dev/null
		then
			echo "${blue}The Host is reachable!${std}"
			i=1
		else
			i=0
		fi

		while [[ $i -eq 0 ]]
		do
			echo ""
			echo "${red}The Host is not reachable! Please try a different IP!${std}"
			read -r -p "Enter the IP of the NTP Server: " ip_adress;
			echo ""
			echo "${blue}Checking if the Host is reachable...${std}"

			if ping -c 1 "$ip_adress" &> /dev/null
			then
				echo "${blue}The Host is reachable!${std}"
				i=1
			else
				i=0
			fi
		done

		echo "${blue}Setting up the NTP Server within ${NTP} ...${std}"
		sudo sed -i "s/^#NTP=*/NTP=${ip_adress}/" $NTP
		sudo sed -i "s/^NTP=*/NTP=${ip_adress}/" $NTP
		sudo sed -i "s/^#FallbackNTP=*/FallbackNTP=0.debian.pool.ntp.org 1.debian.pool.ntp.org 2.debian.pool.ntp.org 3.debian.pool.ntp.org/" $NTP
		sudo sed -i "s/^FallbackNTP=*/FallbackNTP=0.debian.pool.ntp.org 1.debian.pool.ntp.org 2.debian.pool.ntp.org 3.debian.pool.ntp.org/" $NTP
		sudo systemctl restart systemd-timesyncd.service
	else
		echo ""
		echo "${blue}Getting the default Gateway...${std}"
		default_gateway=$(/sbin/ip route | awk '/default/ { print $3 }')
		echo "$default_gateway"
		echo "${blue}Checking if the default Gateway is reachable...${std}"
		if ping -c 1 "$default_gateway" &> /dev/null
		then
			echo "${blue}Setting up the NTP Server within ${NTP} ...${std}"
			sudo sed -i "s/^#NTP=*/NTP=${default_gateway}/" $NTP
			sudo sed -i "s/^NTP=*/NTP=${default_gateway}/" $NTP
			sudo sed -i "s/^#FallbackNTP=*/FallbackNTP=0.debian.pool.ntp.org 1.debian.pool.ntp.org 2.debian.pool.ntp.org 3.debian.pool.ntp.org/" $NTP
			sudo sed -i "s/^FallbackNTP=*/FallbackNTP=0.debian.pool.ntp.org 1.debian.pool.ntp.org 2.debian.pool.ntp.org 3.debian.pool.ntp.org/" $NTP
			sudo systemctl restart systemd-timesyncd.service
		else
			echo "${red}Default Gateway is not reachable! Please enter the IP of the NTP Server manually!${std}"
			echo ""
			read -r -p "${green}Enter the IP of the NTP Server: ${std}" ip_adress;
			echo "${blue}Checking if the Host is reachable...${std}"

			if ping -c 1 "$ip_adress" &> /dev/null
			then
				echo "${blue}The Host is reachable!${std}"
				i=1
			else
				i=0
			fi

			while [[ $i -eq 0 ]]
			do
				echo ""
				echo "${red}The Host is not reachable! Please try a different IP!${std}"
				read -r -p "Enter the IP of the NTP Server: " ip_adress;
				echo ""
				echo "${blue}Checking if the Host is reachable...${std}"

				if ping -c 1 "$ip_adress" &> /dev/null
				then
					echo "${blue}The Host is reachable!${std}"
					i=1
				else
					i=0
				fi
			done

			echo "${blue}Setting up the NTP Server within ${NTP} ...${std}"
			sudo sed -i "s/^#NTP=*/NTP=${ip_adress}/" $NTP
			sudo sed -i "s/^NTP=*/NTP=${ip_adress}/" $NTP
			sudo sed -i "s/^#FallbackNTP=*/FallbackNTP=0.debian.pool.ntp.org 1.debian.pool.ntp.org 2.debian.pool.ntp.org 3.debian.pool.ntp.org/" $NTP
			sudo sed -i "s/^FallbackNTP=*/FallbackNTP=0.debian.pool.ntp.org 1.debian.pool.ntp.org 2.debian.pool.ntp.org 3.debian.pool.ntp.org/" $NTP
			sudo systemctl restart systemd-timesyncd.service
		fi
	fi
	echo ""
	echo "${blue}Local NTP Server is setup successfully! Continuing the Installation!${std}"
}

install_mnt_nas () {
	echo ""
	echo ""
	echo "${blue}Mounting NAS to ${NAS_DIR} Directory...${std}"
	echo ""
	echo "${blue}Checking ${NAS_DIR} Directory...${std}"

	if [ -d "$NAS_DIR" ]
	then
		echo "${green}${NAS_DIR} Directory exists. Not Creating this Directory!${std}"
	else
		echo "${blue}${NAS_DIR} Directory doesn't exist. Creating the Directory!${std}"
		sudo mkdir -p $NAS_DIR
	fi

	echo ""
	read -r -p "${green}Enter the IP of the NAS Server: ${std}" ip_adress;
	echo "${blue}Checking if the Host is reachable...${std}"

	if ping -c 1 "$ip_adress" &> /dev/null
	then
		echo "${blue}The Host is reachable!${std}"
		i=1
	else
		i=0
	fi

	while [[ $i -eq 0 ]]
	do
		echo ""
		echo "${red}The Host is not reachable! Please try a different IP!${std}"
		read -r -p "Enter the IP of the NAS Server: " ip_adress;
		echo ""
		echo "${blue}Checking if the Host is reachable...${std}"

		if ping -c 1 "$ip_adress" &> /dev/null
		then
			echo "${blue}The Host is reachable!${std}"
			i=1
		else
			i=0
		fi
	done

	echo ""
	read -r -p "${green}Enter the Sharename of the Drive: ${std}" sharename;
	echo "${blue}The Sharename is:${std}"
	echo "$sharename"
	echo ""
	read -r -p "${green}Enter the Username for the NAS Server: ${std}" username;
	echo "${blue}The Username is:${std}"
	echo "$username"
	echo ""
	read -r -s -p "${green}Enter the Password of the User: ${std}" password;
	echo "${blue}The Password is:${std}"
	echo "TOPSECRECT"
	echo ""
	echo "${blue}Checking if ${NAS_DIR} Directory is empty before mounting...${std}"
	if [ "$(ls -A "$NAS_DIR")" ]
	then
		echo ""
		echo "${red}${NAS_DIR} Directory contains precious Files!${std}"
		echo "${yellow}If you proceed with mounting your NAS you will lose access to those Files!${std}"
		echo "${yellow}You should gain access to your Files again by unmounting the Drive though.${std}"
		echo ""
		echo "${green}Do you want to proceed?${std}"
		read -r -p "Yes (y)/ No (n): " n;

		while ! [[ "$n" =~ ^(y|n)$ ]];
		do
			echo ""
			echo "${red}Wrong Input! Please type 'y' for 'YES' or 'n' for 'NO'!${std}"
			read -r -p "Yes (y)/ No (n): " n;
		done

		if [[ "$n" =~ ^(y)$ ]];
		then
			echo ""
			echo "${blue}Proceeding to mount the Drive!${std}"
			echo "${blue}Appending the Code needed to mount the NAS to ${FSTAB} file...${std}"
			echo "//${ip_adress}/${sharename} ${NAS_DIR} cifs username=${username},password=${password},defaults,nofail,_netdev,file_mode=0777,dir_mode=0777 0 0" | sudo tee -a $FSTAB > /dev/null

			if sudo mount -a &> /dev/null
			then
				echo ""
				echo "${blue}Successfully mounted the NAS! Continuing the Installation!${std}"
				sleep 1
			else
				echo ""
				echo "${red}ERROR - NAS could not be mounted! Continuing the Installation!${std}"
				sleep 1
			fi
		else
			echo ""
			echo "${red}ERROR - Operation aborted! Continuing the Installation!${std}"
			sleep 1
		fi
	else
		echo ""
		echo "${blue}${NAS_DIR} Directory is empty!${std}"
		echo "${blue}Appending the Code needed to mount the NAS to ${FSTAB} file...${std}"
		echo "//${ip_adress}/${sharename} ${NAS_DIR} cifs username=${username},password=${password},defaults,nofail,_netdev,file_mode=0777,dir_mode=0777 0 0" | sudo tee -a $FSTAB > /dev/null

		if sudo mount -a &> /dev/null
		then
			echo ""
			echo "${blue}Successfully mounted the NAS! Continuing the Installation!${std}"
			sleep 1
		else
			echo ""
			echo "${red}ERROR - NAS could not be mounted! Continuing the Installation!${std}"
			sleep 1
		fi
	fi
}

#Main Script
echo ""
echo ""
echo "${blue}      ///////////   ///////////   //      ///////////   ///////////  ////////////  //       //  ///////////${std}"
echo "${blue}     //       //   //       //   //      //            //                //       //       //  //       //${std}"
echo "${blue}    //       //   //       //   //      //            //                //       //       //  //       //${std}"
echo "${blue}   ///////////   ///////////   //      ///////////   ///////////       //       //       //  ///////////${std}"
echo "${blue}  // \\\         //            //               //   //                //       //       //  //${std}"
echo "${blue} //   \\\       //            //               //   //                //       //       //  //${std}"
echo "${blue}//     \\\     //            //      ///////////   ///////////       //       ///////////  //${std}"
echo "RPI Setup Tool by Nightstalker"
echo ""
echo ""
echo "${blue}Checking OS...${std}"
os_type="$(grep -E '^(NAME)=' /etc/os-release)"
os_type=${os_type#*=}

if [[ "$os_type" == *"Kali"* ]]
then
	INSTALL_OPTIONS=1
	echo ""
	echo "$os_type"
elif [[ "$os_type" == *"Raspbian"* ]]
then
	if [[ $(cat /boot/issue.txt) == *"stage2"* ]]
	then
		INSTALL_OPTIONS=2
		echo ""
		echo "$os_type"
		echo " Lite Version"
	elif [[ $(cat /boot/issue.txt) == *"stage4"* ]]
	then
		INSTALL_OPTIONS=3
		echo ""
		echo "$os_type"
		echo " GUI Lite Version"
	elif [[ $(cat /boot/issue.txt) == *"stage5"* ]]
	then
		INSTALL_OPTIONS=3
		echo ""
		echo "$os_type"
		echo " GUI Full Version"
	else
		INSTALL_OPTIONS=2
		echo ""
		echo "$os_type"
		echo " Unknown Raspbian"
		echo " Using Lite Version Install Options!"
	fi
else
	echo ""
	echo "${red}Wrong Operating System detected! Aborting the Installation!${std}"
	sleep 1
	exit 1
fi

echo ""
echo "${blue}Operating System okay! Continuing the Installation!${std}"
sleep 1

echo ""
echo ""
echo "${blue}Updating Repository List...${std}"
echo ""
sudo apt-get update
echo ""
echo "${blue}Repository List updated! Continuing Installation!${std}"
sleep 1

echo ""
echo ""
echo "${green}Do you want to change your Password for ${USER}?${std}"
read -r -p "Yes (y)/ No (n): " n;

while ! [[ "$n" =~ ^(y|n)$ ]];
do
	echo ""
	echo "${red}Wrong Input! Please type 'y' for 'YES' or 'n' for 'NO'!${std}"
	read -r -p "Yes (y)/ No (n): " n;
done

if [[ "$n" =~ ^(y)$ ]];
then
	echo ""
	echo "${blue}Please change your password for ${USER} ...${std}"
	passwd
	echo ""
	echo "${blue}Password changed successfully! Continuing the Installation!${std}"
	sleep 1
else
	echo ""
	echo "${blue}Not changing your Userpassword! Continuing the Installation!${std}"
	sleep 1
fi

echo ""
echo ""
echo "${green}Do you want to change your Password for root?${std}"
read -r -p "Yes (y)/ No (n): " n;

while ! [[ "$n" =~ ^(y|n)$ ]];
do
	echo ""
	echo "${red}Wrong Input! Please type 'y' for 'YES' or 'n' for 'NO'!${std}"
	read -r -p "Yes (y)/ No (n): " n;
done

if [[ "$n" =~ ^(y)$ ]];
then
	echo ""
	echo "${blue}Please change your password for root ...${std}"
	sudo passwd
	echo ""
	echo "${blue}Password changed successfully! Continuing the Installation!${std}"
	sleep 1
else
	echo ""
	echo "${blue}Not changing your password! Continuing the Installation!${std}"
	sleep 1
fi

echo ""
echo ""
echo "${green}It is highly recommended to update your OS before Installation!${std}"
echo "${green}Do you want to update your OS?${std}"
read -r -p "Yes (y)/ No (n): " n;

while ! [[ "$n" =~ ^(y|n)$ ]];
do
	echo ""
	echo "${red}Wrong Input! Please type 'y' for 'YES' or 'n' for 'NO'!${std}"
	read -r -p "Yes (y)/ No (n): " n;
done

if [[ "$n" =~ ^(y)$ ]];
then
	echo ""
	echo "${blue}Updating the OS now...${std}"
	echo ""
	sudo apt-get upgrade -y
	echo ""
	echo "${blue}Operating System updated successfully! Continuing the Installation!${std}"
	sleep 1
else
	echo ""
	echo "${red}Not updating your OS! Installation might fail!${std}"
	sleep 1
fi

echo ""
echo ""
echo "${blue}Checking Directories...${std}"
echo ""
echo "${blue}Checking temporary ${TEMP_DIR} Directory...${std}"

if [ -d "$TEMP_DIR" ]
then
	echo "${green}Temporary ${TEMP_DIR} Directory exists. Not Creating this Directory!${std}"
else
	echo "${blue}Temporary ${TEMP_DIR} Directory doesn't exist. Creating the Directory!${std}"
	sudo mkdir -p $TEMP_DIR
fi

echo "${blue}Checking ${INSTALL_DIR} Directory...${std}"

if [ -d "$INSTALL_DIR" ]
then
	echo "${green}${INSTALL_DIR} Directory exists. Not Creating this Directory!${std}"
else
	echo "${blue}${INSTALL_DIR} Directory doesn't exist. Creating the Directory!${std}"
	sudo mkdir -p $INSTALL_DIR
fi

echo "${blue}Checking ${BAK_DIR} Directory...${std}"

if [ -d "$BAK_DIR" ]
then
	echo "${green}${BAK_DIR} Directory exists. Not Creating this Directory!${std}"
else
	echo "${blue}${BAK_DIR} Directory doesn't exist. Creating the Directory!${std}"
	sudo mkdir -p $BAK_DIR
fi

echo ""
echo "${blue}Directories are okay! Continuing the Installation!${std}"
sleep 1

echo ""
echo ""
echo "${blue}Installing Git...${std}"
echo ""
echo "${blue}Checking if Git is already installed...${std}"

if hash git 2>/dev/null
then
	echo "${blue}Git is already installed!${std}"
else
	echo "${red}Git is not installed. Installing Git now!${std}"
	echo ""
	sudo apt-get install git -y
	sleep 1
fi

echo ""
echo "${blue}Git is installed and okay! Continuing Installation!${std}"
sleep 1

echo ""
echo ""
echo "${green}Do you want to install the Standard Packages or select them yourself?${std}"
echo ""
echo "1. Install Standard Packages"
echo "2. Select Custom Packages"

echo ""
read -r -p "${green}Enter a Number for an Option: ${std}" n

while [[ $n -lt 1 || $n -gt 2 ]]
do
	echo ""
	echo "${red}Wrong Input! Please Select a Number for an Option!${std}"
	read -r -p "Enter a Number for an Option: " n;
done

if [[ $n -eq 1 ]]
then
	clear_arrays
	set_possible_packages
	set_standard_packages
	show_packages_to_install
	echo ""
	echo "${green}Do you want to change something?${std}"
	read -r -p "Yes (y)/ No (n): " n;

	while ! [[ "$n" =~ ^(y|n)$ ]];
	do
		echo ""
		echo "${red}Wrong Input! Please type 'y' for 'YES' or 'n' for 'NO'!${std}"
		read -r -p "Yes (y)/ No (n): " n;
	done

	if [[ "$n" =~ ^(y)$ ]];
	then
		while ! [[ "$n" =~ ^(n)$ ]];
		do
			clear_arrays
			set_possible_packages
			select_custom_packages
			show_packages_to_install
			echo ""
			echo "${green}Do you want to change something?${std}"
			read -r -p "Yes (y)/ No (n): " n;

			while ! [[ "$n" =~ ^(y|n)$ ]];
			do
				echo ""
				echo "${red}Wrong Input! Please type 'y' for 'YES' or 'n' for 'NO'!${std}"
				read -r -p "Yes (y)/ No (n): " n;
			done
		done
	fi
else
	n="y"
	while ! [[ "$n" =~ ^(n)$ ]];
	do
		clear_arrays
		set_possible_packages
		select_custom_packages
		show_packages_to_install
		echo ""
		echo "${green}Do you want to change something?${std}"
		read -r -p "Yes (y)/ No (n): " n;

		while ! [[ "$n" =~ ^(y|n)$ ]];
		do
			echo ""
			echo "${red}Wrong Input! Please type 'y' for 'YES' or 'n' for 'NO'!${std}"
			read -r -p "Yes (y)/ No (n): " n;
		done
	done
fi

echo ""
echo "${blue}Packages selected! Continuing Installation!${std}"
sleep 1

echo ""
echo ""
echo "${blue}Creating Backups if neccessary...${std}"
if [[ $NO_WIFI || $MNT_NAS || $ISPBUSTER ]]
then
	if $NO_WIFI
	then
		echo ""
		echo "${blue}Creating a Backup of ${CONFIG} ...${std}"
		echo "${blue}Copying ${CONFIG} to ${CONFIG_BAK} ...${std}"
		sudo cp $CONFIG $CONFIG_BAK
	fi
	if $MNT_NAS
	then
		echo ""
		echo "${blue}Creating a Backup of ${FSTAB} ...${std}"
		echo "${blue}Copying ${FSTAB} to ${FSTAB_BAK} ...${std}"
		sudo cp $FSTAB $FSTAB_BAK
	fi
	if $ISPBUSTER
	then
		echo ""
		echo "${blue}Checking if there's a Crontab ...${std}"
		CRONOUT=$(sudo crontab -u root -l 2>&1)
		if [[ $CRONOUT == "no crontab for root" ]]
		then
			echo "${green}There is no Crontab! Nothing to backup!${std}"
		else
			echo "${blue}There is a Crontab! Creating a Backup of it ...${std}"
			echo "${blue}Copying the Crontab to ${CRON_BAK} ...${std}"
			sudo crontab -u root -l | sudo tee "${CRON_BAK}" 1> /dev/null
		fi
	fi
	echo ""
	echo "${blue}Backups created successfully! Continuing Installation!${std}"
	sleep 1
else
	echo ""
	echo "${blue}No Backups needed! Continuing Installation!${std}"
	sleep 1
fi

echo ""
echo ""
echo "${blue}Installing Packages...${std}"

if $EEPROM_UPDATE
then
	install_eeprom_update
fi

if $RASPI_CONFIG
then
	install_raspi_config
fi

if $KALIVNC
then
	install_kalivnc
fi

if $UCLCD
then
	install_uclcd
fi

if $NETDRIVE
then
	install_netdrive
fi

if $EEPROM_FLASHER
then
	install_eeprom_flasher
fi

if $ISPBUSTER
then
	install_ispbuster
fi

if $PISHRINK
then
	install_pishrink
fi

if $SAMBA
then
	install_samba
fi

if $GPARTED
then
	install_gparted
fi

if $RPIIMAGER
then
	install_rpi_imager
fi

if $NO_WIFI
then
	install_no_wifi
fi

if $SET_LOCALNTP
then
	install_local_ntp
fi

if $MNT_NAS
then
	install_mnt_nas
fi

echo ""
echo "${blue}All selected Packages installed! Continuing Installation!${std}"
sleep 1

echo ""
echo ""
echo "${blue}Cleaning up the Installation...${std}"
echo ""
echo "${blue}Checking temporary ${TEMP_DIR} Directory...${std}"

if [ -d "$TEMP_DIR" ]
then
	echo "${blue}Temporary ${TEMP_DIR} Directory exists. Purging this Directory!${std}"
	sudo rm -d -r $TEMP_DIR
else
	echo "${green}Temporary ${TEMP_DIR} Directory doesn't exist. Not able to delete it!${std}"
fi

echo "${blue}Checking if I exist in the Directory I'm run...${std}"

if [ -f "${MY_PATH}" ]
then
	echo "${blue}It seems I still exist. Purging myself now for Cleanup...${std}"
	i_exist=true
else
	echo "${red}It seems I don't exist in the Directory I'm run. Not able to clean myself up!${std}"
	i_exist=false
fi

echo ""
echo "${blue}Cleanup complete! Continuing the Installation!${std}"
sleep 1

echo ""
echo ""
echo "${green}It is highly recommended to reboot after Installation!${std}"
echo "${green}Do you want to reboot now?${std}"
read -r -p "Yes (y)/ No (n): " n;

while ! [[ "$n" =~ ^(y|n)$ ]];
do
	echo ""
	echo "${red}Wrong Input! Please type 'y' for 'YES' or 'n' for 'NO'!${std}"
	read -r -p "Yes (y)/ No (n): " n;
done

if [[ "$n" =~ ^(y)$ ]];
then
	echo ""
	echo "${green}Installation complete! Rebooting now...${std}"
	if $i_exist
	then
		sudo rm "${MY_PATH}"
	fi
	sudo reboot now
	sleep 1
else
	echo ""
	echo "${red}Installation complete! Not Rebooting!${std}"
	echo "${red}Please reboot your System whenever it is convenient!${std}"
	if $i_exist
	then
		sudo rm "${MY_PATH}"
	fi
	sleep 1
fi
