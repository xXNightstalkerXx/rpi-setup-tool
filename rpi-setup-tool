#! /bin/bash

#General Directory Declarations
START_DIR=$PWD
TEMP_DIR=/tmp/downloads
SCRIPTS_DIR=/usr/bin
CONFIG=/boot/config.txt
MODULES=/etc/modules

#WGET URL Declarations
WGET_KALIVNC=https://raw.githubusercontent.com/xXNightstalkerXx/rpi-kalivnc-installer/master/rpi-kalivnc-autoinstaller
WGET_EEPROM=https://raw.githubusercontent.com/xXNightstalkerXx/rpi-eeprom-flasher/master/rpi-eeprom-autoinstaller
WGET_UCLCD=https://raw.githubusercontent.com/xXNightstalkerXx/uctronics-lcd-installer/master/uctronics-lcd-autoinstaller
WGET_NETDRIVE=https://raw.githubusercontent.com/xXNightstalkerXx/netdrive-connector/master/netdrive-connector
WGET_PISHRINK=https://raw.githubusercontent.com/Drewsif/PiShrink/master/pishrink.sh

#Color Declarations
std=$(tput setaf 15)
red=$(tput setaf 9 bold)
green=$(tput setaf 10 bold)
yellow=$(tput setaf 11 bold)
pink=$(tput setaf 57)
blue=$(tput setaf 27 bold)

#Declare Arrays
USED_PACKAGE_ARRAY=()
UNUSED_PACKAGE_ARRAY=()

#Function Decalarations
clear_arrays () {
	USED_PACKAGE_ARRAY=()
	UNUSED_PACKAGE_ARRAY=()
}

set_possible_packages () {
	if [[ $INSTALL_OPTIONS -eq 1 ]]
	then
		#Possible Packages to install for Kali
		EEPROM_UPDATE=false
		KALIVNC=true
		UCLCD=true
		NETDRIVE=true
		EEPROM_FLASHER=true
		PISHRINK=true
		SAMBA=true
		GPARTED=true
		RPIIMAGER=true
		NO_WIFI=false
		MNT_NAS=true	

	elif [[ $INSTALL_OPTIONS -eq 2 ]]
	then
		#Possible Packages to install for Raspbian Lite
		EEPROM_UPDATE=true
		KALIVNC=false
		UCLCD=true
		NETDRIVE=true
		EEPROM_FLASHER=false
		PISHRINK=true
		SAMBA=true
		GPARTED=false
		RPIIMAGER=false
		NO_WIFI=true
		MNT_NAS=true

	elif [[ $INSTALL_OPTIONS -eq 3 ]]
	then
		#Possible Packages to install for Raspbian GUI
		EEPROM_UPDATE=true
		KALIVNC=false
		UCLCD=true
		NETDRIVE=true
		EEPROM_FLASHER=false
		PISHRINK=true
		SAMBA=true
		GPARTED=true
		RPIIMAGER=true
		NO_WIFI=true
		MNT_NAS=true
	fi
}

set_standard_packages () {
	if [[ $INSTALL_OPTIONS -eq 1 ]]
	then
		#Standard Packages to install for Kali
		KALIVNC=true
		UCLCD=true
		NETDRIVE=true
		EEPROM_FLASHER=true
		PISHRINK=true
		SAMBA=true
		GPARTED=true
		RPIIMAGER=false
		MNT_NAS=true
		USED_PACKAGE_ARRAY=("Kali VNC" "UCTronics LCD" "Netdrive Connector" "EEPROM Flasher" "Pishrink" "Samba" "GParted" "Mount NAS")
		UNUSED_PACKAGE_ARRAY=("RPI Imager")

		#Packages that can't be installed
		#EEPROM_UPDATE=false
		#NO_WIFI=false

	elif [[ $INSTALL_OPTIONS -eq 2 ]]
	then
		#Standard Packages to install for Raspbian Lite
		EEPROM_UPDATE=true
		UCLCD=true
		NETDRIVE=true
		PISHRINK=true
		SAMBA=true
		NO_WIFI=true
		MNT_NAS=false
		USED_PACKAGE_ARRAY=("Update EEPROM" "UCTronics LCD" "Netdrive Connector" "Pishrink" "Samba" "Disable WIFI")
		UNUSED_PACKAGE_ARRAY=("Mount NAS")

		#Packages that can't be installed
		#KALIVNC=false
		#EEPROM_FLASHER=false
		#GPARTED=false
		#RPIIMAGER=false

	elif [[ $INSTALL_OPTIONS -eq 3 ]]
	then
		#Standard Packages to install for Raspbian GUI
		EEPROM_UPDATE=true
		UCLCD=true
		NETDRIVE=true
		PISHRINK=true
		SAMBA=true
		GPARTED=true
		RPIIMAGER=true
		NO_WIFI=true
		MNT_NAS=true
		USED_PACKAGE_ARRAY=("Update EEPROM" "UCTronics LCD" "Netdrive Connector" "Pishrink" "Samba" "GParted" "RPI Imager" "Disable WIFI" "Mount NAS")

		#Packages that can't be installed
		#KALIVNC=false
		#EEPROM_FLASHER=false
	fi
}

select_custom_packages () {
	echo ""
	echo ""
	echo "${blue}Please select the packages you want to install!${std}"

	if $EEPROM_UPDATE
	then
		echo ""
		echo "${green}Update EEPROM?${std}"
		read -r -p "Yes (y)/ No (n): " n;

		while ! [[ "$n" =~ ^(y|n)$ ]];
		do
			echo ""
			echo "${red}Wrong Input! Please type 'y' for 'YES' or 'n' for 'NO'!${std}"
			read -r -p "Yes (y)/ No (n): " n;
		done

		if [[ "$n" =~ ^(y)$ ]];
		then
			EEPROM_UPDATE=true
			USED_PACKAGE_ARRAY+=("Update EEPROM")
		else
			EEPROM_UPDATE=false
			UNUSED_PACKAGE_ARRAY+=("Update EEPROM")
		fi
	fi

	if $KALIVNC
	then
		echo ""
		echo "${green}Install Kali VNC?${std}"
		read -r -p "Yes (y)/ No (n): " n;

		while ! [[ "$n" =~ ^(y|n)$ ]];
		do
			echo ""
			echo "${red}Wrong Input! Please type 'y' for 'YES' or 'n' for 'NO'!${std}"
			read -r -p "Yes (y)/ No (n): " n;
		done

		if [[ "$n" =~ ^(y)$ ]];
		then
			KALIVNC=true
			USED_PACKAGE_ARRAY+=("Kali VNC")
		else
			KALIVNC=false
			UNUSED_PACKAGE_ARRAY+=("Kali VNC")
		fi
	fi

	if $UCLCD
	then
		echo ""
		echo "${green}Install UCTronics LCD?${std}"
		read -r -p "Yes (y)/ No (n): " n;

		while ! [[ "$n" =~ ^(y|n)$ ]];
		do
			echo ""
			echo "${red}Wrong Input! Please type 'y' for 'YES' or 'n' for 'NO'!${std}"
			read -r -p "Yes (y)/ No (n): " n;
		done

		if [[ "$n" =~ ^(y)$ ]];
		then
			UCLCD=true
			USED_PACKAGE_ARRAY+=("UCTronics LCD")
		else
			UCLCD=false
			UNUSED_PACKAGE_ARRAY+=("UCTronics LCD")
		fi
	fi

	if $NETDRIVE
	then
		echo ""
		echo "${green}Install Netdrive Connector?${std}"
		read -r -p "Yes (y)/ No (n): " n;

		while ! [[ "$n" =~ ^(y|n)$ ]];
		do
			echo ""
			echo "${red}Wrong Input! Please type 'y' for 'YES' or 'n' for 'NO'!${std}"
			read -r -p "Yes (y)/ No (n): " n;
		done

		if [[ "$n" =~ ^(y)$ ]];
		then
			NETDRIVE=true
			USED_PACKAGE_ARRAY+=("Netdrive Connector")
		else
			NETDRIVE=false
			UNUSED_PACKAGE_ARRAY+=("Netdrive Connector")
		fi
	fi

	if $EEPROM_FLASHER
	then
		echo ""
		echo "${green}Install EEPROM Flasher?${std}"
		read -r -p "Yes (y)/ No (n): " n;

		while ! [[ "$n" =~ ^(y|n)$ ]];
		do
			echo ""
			echo "${red}Wrong Input! Please type 'y' for 'YES' or 'n' for 'NO'!${std}"
			read -r -p "Yes (y)/ No (n): " n;
		done

		if [[ "$n" =~ ^(y)$ ]];
		then
			EEPROM_FLASHER=true
			USED_PACKAGE_ARRAY+=("EEPROM Flasher")
		else
			EEPROM_FLASHER=false
			UNUSED_PACKAGE_ARRAY+=("EEPROM Flasher")
		fi
	fi

	if $PISHRINK
	then
		echo ""
		echo "${green}Install Pishrink?${std}"
		read -r -p "Yes (y)/ No (n): " n;

		while ! [[ "$n" =~ ^(y|n)$ ]];
		do
			echo ""
			echo "${red}Wrong Input! Please type 'y' for 'YES' or 'n' for 'NO'!${std}"
			read -r -p "Yes (y)/ No (n): " n;
		done

		if [[ "$n" =~ ^(y)$ ]];
		then
			PISHRINK=true
			USED_PACKAGE_ARRAY+=("Pishrink")
		else
			PISHRINK=false
			UNUSED_PACKAGE_ARRAY+=("Pishrink")
		fi
	fi

	if $SAMBA
	then
		echo ""
		echo "${green}Install Samba?${std}"
		read -r -p "Yes (y)/ No (n): " n;

		while ! [[ "$n" =~ ^(y|n)$ ]];
		do
			echo ""
			echo "${red}Wrong Input! Please type 'y' for 'YES' or 'n' for 'NO'!${std}"
			read -r -p "Yes (y)/ No (n): " n;
		done

		if [[ "$n" =~ ^(y)$ ]];
		then
			SAMBA=true
			USED_PACKAGE_ARRAY+=("Samba")
		else
			SAMBA=false
			UNUSED_PACKAGE_ARRAY+=("Samba")
		fi
	fi

	if $GPARTED
	then
		echo ""
		echo "${green}Install GParted?${std}"
		read -r -p "Yes (y)/ No (n): " n;

		while ! [[ "$n" =~ ^(y|n)$ ]];
		do
			echo ""
			echo "${red}Wrong Input! Please type 'y' for 'YES' or 'n' for 'NO'!${std}"
			read -r -p "Yes (y)/ No (n): " n;
		done

		if [[ "$n" =~ ^(y)$ ]];
		then
			GPARTED=true
			USED_PACKAGE_ARRAY+=("GParted")
		else
			GPARTED=false
			UNUSED_PACKAGE_ARRAY+=("GParted")
		fi
	fi

	if $RPIIMAGER
	then
		echo ""
		echo "${green}Install RPI Imager?${std}"
		read -r -p "Yes (y)/ No (n): " n;

		while ! [[ "$n" =~ ^(y|n)$ ]];
		do
			echo ""
			echo "${red}Wrong Input! Please type 'y' for 'YES' or 'n' for 'NO'!${std}"
			read -r -p "Yes (y)/ No (n): " n;
		done

		if [[ "$n" =~ ^(y)$ ]];
		then
			RPIIMAGER=true
			USED_PACKAGE_ARRAY+=("RPI Imager")
		else
			RPIIMAGER=false
			UNUSED_PACKAGE_ARRAY+=("RPI Imager")
		fi
	fi

	if $NO_WIFI
	then
		echo ""
		echo "${green}Disable Bluetooth and WIFI?${std}"
		read -r -p "Yes (y)/ No (n): " n;

		while ! [[ "$n" =~ ^(y|n)$ ]];
		do
			echo ""
			echo "${red}Wrong Input! Please type 'y' for 'YES' or 'n' for 'NO'!${std}"
			read -r -p "Yes (y)/ No (n): " n;
		done

		if [[ "$n" =~ ^(y)$ ]];
		then
			NO_WIFI=true
			USED_PACKAGE_ARRAY+=("Disable WIFI")
		else
			NO_WIFI=false
			UNUSED_PACKAGE_ARRAY+=("Disable WIFI")
		fi
	fi

	if $MNT_NAS
	then
		echo ""
		echo "${green}Mount a NAS?${std}"
		read -r -p "Yes (y)/ No (n): " n;

		while ! [[ "$n" =~ ^(y|n)$ ]];
		do
			echo ""
			echo "${red}Wrong Input! Please type 'y' for 'YES' or 'n' for 'NO'!${std}"
			read -r -p "Yes (y)/ No (n): " n;
		done

		if [[ "$n" =~ ^(y)$ ]];
		then
			MNT_NAS=true
			USED_PACKAGE_ARRAY+=("Mount NAS")
		else
			MNT_NAS=false
			UNUSED_PACKAGE_ARRAY+=("Mount NAS")
		fi
	fi
}

show_packages_to_install () {
	echo ""
	echo ""
	echo "${blue}The following Packages are selected for Installation:${std}"
	echo ""

	for i in "${USED_PACKAGE_ARRAY[@]}" 
	do
		printf "%s\n" "${i}"
	done

	if ! [[ ${#UNUSED_PACKAGE_ARRAY[@]} -eq 0 ]]
	then
		echo ""
		echo "${blue}The following Packages are available for Installation but are NOT selected:${std}"
		echo ""

		for i in "${UNUSED_PACKAGE_ARRAY[@]}"
		do
			printf "%s\n" "${i}"
		done
	else
		echo ""
		echo "${blue}There are no other Packages available to install!${std}"
	fi
}


#Main Script
echo "${blue}Updating Repository List...${std}"
sudo apt-get update
echo ""
echo "${blue}Repository List updated! Continuing Installation!${std}"
sleep 1


echo ""
echo ""
echo "${green}It is highly recommended to update your OS before Installation!${std}"
echo "${green}Do you want to update your OS?${std}"
echo ""
read -r -p "${green}Yes (y)/ No (n): ${std}" n;

while ! [[ "$n" =~ ^(y|n)$ ]];
do
	echo ""
	echo "${red}Wrong Input! Please type 'y' for 'YES' or 'n' for 'NO'!${std}"
	read -r -p "Yes (y)/ No (n): " n;
done

if [[ "$n" =~ ^(y)$ ]];
then
	echo ""
	echo "${blue}Updating the OS now...${std}"
	sudo apt-get upgrade -y
	echo ""
	echo "${blue}Operating System updated successfully! Continuing the Installation!${std}"
	sleep 1
else
	echo ""
	echo "${red}Not updating your OS! Installation might fail!${std}"
	sleep 1
fi


echo ""
echo ""
echo "${blue}      ///////////   ///////////   //      ///////////   ///////////  ////////////  //       //  ///////////${std}"
echo "${blue}     //       //   //       //   //      //            //                //       //       //  //       //${std}"
echo "${blue}    //       //   //       //   //      //            //                //       //       //  //       //${std}"
echo "${blue}   ///////////   ///////////   //      ///////////   ///////////       //       //       //  ///////////${std}"
echo "${blue}  // \\\        //            //               //   //                //       //       //  //${std}"
echo "${blue} //   \\\      //            //               //   //                //       //       //  //${std}"
echo "${blue}//     \\\    //            //      ///////////   ///////////       //       ///////////  //${std}"
echo "RPI Setup Tool by Nightstalker"
echo ""
echo ""
echo "${blue}Checking OS...${std}"
os_type="$(grep -E '^(NAME)=' /etc/os-release)"
os_type=${os_type#*=}

if [[ "$os_type" == *"Kali"* ]]
then
	INSTALL_OPTIONS=1
	echo ""
	echo "$os_type"
elif [[ "$os_type" == *"Raspbian"* ]]
then
	if [[ $(cat /boot/issue.txt) == *"stage2"* ]]
	then
		INSTALL_OPTIONS=2
		echo ""
		echo "$os_type"
		echo " Lite Version"
	elif [[ $(cat /boot/issue.txt) == *"stage4"* ]]
	then
		INSTALL_OPTIONS=3
		echo ""
		echo "$os_type"
		echo " GUI Lite Version"
	elif [[ $(cat /boot/issue.txt) == *"stage5"* ]]
	then
		INSTALL_OPTIONS=3
		echo ""
		echo "$os_type"
		echo " GUI Full Version"
	else
		INSTALL_OPTIONS=2
		echo ""
		echo "$os_type"
		echo " Unknown Raspbian"
		echo " Using Lite Version Install Options!"
	fi
else
	echo ""
	echo "${red}Wrong Operating System detected! Aborting the Installation!${std}"
	sleep 1
	exit 1
fi

#if [[ $INSTALL_OPTIONS -eq 1 ]]
#then
	#Possible Packages to install
	#set_possible_packages
	#clear_arrays

#elif [[ $INSTALL_OPTIONS -eq 2 ]]
#then
	#Possible Packages to install
	#set_possible_packages
	#clear_arrays

#elif [[ $INSTALL_OPTIONS -eq 3 ]]
#then
	#Possible Packages to install
	#set_possible_packages
	#clear_arrays

#fi

echo ""
echo "${blue}Operating System okay! Continuing the Installation!${std}"
sleep 1


echo ""
echo ""
echo "${green}Do you want to install the Standard Packages or select them yourself?${std}"
echo ""
echo "1. Install Standard Packages"
echo "2. Select Custom Packages"

echo ""
read -r -p "${green}Enter a Number for an Option: ${std}" n

while [[ $n -lt 1 || $n -gt 2 ]]
do
	echo ""
	echo "${red}Wrong Input! Please Select a Number for an Option!${std}"
	read -r -p "Enter a Number for an Option: " n;
done

if [[ $n -eq 1 ]]
then
	clear_arrays
	set_possible_packages
	set_standard_packages
	show_packages_to_install
	echo ""
	echo "${green}Do you want to change something?${std}"
	read -r -p "Yes (y)/ No (n): " n;

	while ! [[ "$n" =~ ^(y|n)$ ]];
	do
		echo ""
		echo "${red}Wrong Input! Please type 'y' for 'YES' or 'n' for 'NO'!${std}"
		read -r -p "Yes (y)/ No (n): " n;
	done

	if [[ "$n" =~ ^(y)$ ]];
	then
		while ! [[ "$n" =~ ^(n)$ ]];
		do
			clear_arrays
			set_possible_packages
			select_custom_packages
			show_packages_to_install
			echo ""
			echo "${green}Do you want to change something?${std}"
			read -r -p "Yes (y)/ No (n): " n;

			while ! [[ "$n" =~ ^(y|n)$ ]];
			do
				echo ""
				echo "${red}Wrong Input! Please type 'y' for 'YES' or 'n' for 'NO'!${std}"
				read -r -p "Yes (y)/ No (n): " n;
			done
		done
	fi
else
	n="y"
	while ! [[ "$n" =~ ^(n)$ ]];
	do
		clear_arrays
		set_possible_packages
		select_custom_packages
		show_packages_to_install
		echo ""
		echo "${green}Do you want to change something?${std}"
		read -r -p "Yes (y)/ No (n): " n;

		while ! [[ "$n" =~ ^(y|n)$ ]];
		do
			echo ""
			echo "${red}Wrong Input! Please type 'y' for 'YES' or 'n' for 'NO'!${std}"
			read -r -p "Yes (y)/ No (n): " n;
		done
	done
fi

echo ""
echo "${blue}Packages selected! Continuing Installation!${std}"
sleep 1


echo ""
echo ""
echo "${blue}Checking if Git is installed...${std}"
if hash git 2>/dev/null
then
	echo ""
	echo "${blue}Git is already installed!${std}"
else
	echo ""
	echo "${red}Git is not installed. Installing Git now!${std}"
	sudo apt-get install git -y
	sleep 1
fi
echo ""
echo "${blue}Git is installed and okay! Continuing Installation!${std}"
sleep 1
